package nz.ac.auckland.concert.common;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

public interface ConcertService extends Remote {

	/**
	 * Creates and stores a new Concert.
	 * @param concert the new Concert to create. The concert's fields should be 
	 * filled in except for the id field, whose value is generated by the service.
	 * @return a copy of the new Concert, with its id field populated.
	 * @throws RemoteException
	 */
	Concert createConcert(Concert concert) throws RemoteException;
	
	/**
	 * Retrieves a Concert based on a specified id. 
	 * @param id the id of the requested Concert.
	 * @return The matching Concert object, or null if there is no match. 
	 * @throws RemoteException
	 */
	Concert getConcert(Long id) throws RemoteException;
	
	/**
	 * Updates an existing Concert.
	 * @param concert the Concert to update.
	 * @return true if the Concert exists, false otherwise. Where false is
	 * returned the state of the service is not changed (i.e. the Concert isn't
	 * stored).
	 * @throws RemoteException
	 */
	boolean updateConcert(Concert concert) throws RemoteException;
	
	/**
	 * Deletes a Concert with a specified id.
	 * @param id the unique id of the Concert to delete.
	 * @return true if the Concert is found and deleted, false otherwise.
	 * @throws RemoteException
	 */
	boolean deleteConcert(Long id) throws RemoteException;
	
	/**
	 * Returns all Concerts known to the service.
	 * @return A List of Concerts.
	 * @throws RemoteException
	 */
	List<Concert> getAllConcerts() throws RemoteException;
	
	/**
	 * removes all Concerts stored b the service.
	 * @throws RemoteException
	 */
	void clear() throws RemoteException;
}
